name: Auto Bump & Tag Provider GUI

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Version bump type (patch|minor|major)"
        required: false
        default: patch
        type: choice
        options: [patch, minor, major]
  push:
    branches: [ main ]
    paths:
      - 'provider-gui/**'
      - 'provider-server/**'
      - 'scripts/build_provider_cli.py'

jobs:
  bump_and_tag:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Compute and bump GUI version
        id: bump
        run: |
          node -e '
            const fs=require("fs");
            const p="provider-gui/package.json";
            const pkg=JSON.parse(fs.readFileSync(p));
            const type=(process.env.RELEASE_TYPE||"patch").toLowerCase();
            const v=(pkg.version||"1.0.0").split(".").map(n=>parseInt(n||0,10));
            if(type==="major"){v[0]++; v[1]=0; v[2]=0;} else if(type==="minor"){v[1]++; v[2]=0;} else {v[2]++;}
            pkg.version=v.join(".");
            fs.writeFileSync(p, JSON.stringify(pkg, null, 2)+"\n");
            console.log("NEW_VERSION="+pkg.version);
          ' >> $GITHUB_OUTPUT
        env:
          RELEASE_TYPE: ${{ github.event_name == 'workflow_dispatch' && inputs.release_type || 'patch' }}

      - name: Configure git user
        run: |
          git config user.email "actions@users.noreply.github.com"
          git config user.name "GitHub Actions"

      - name: Commit version bump
        run: |
          ver=${{ steps.bump.outputs.NEW_VERSION }}
          git add provider-gui/package.json
          git commit -m "provider-gui: release v$ver [skip ci]" || echo "No changes to commit"

      - name: Push commit
        run: |
          git push origin HEAD:main

      - name: Create and push tag
        run: |
          ver=${{ steps.bump.outputs.NEW_VERSION }}
          tag="provider-gui-v$ver"
          # Skip if tag already exists
          if git rev-parse "$tag" >/dev/null 2>&1; then
            echo "Tag $tag already exists; skipping"
            exit 0
          fi
          git tag -a "$tag" -m "Provider GUI $ver"
          git push origin "$tag"
