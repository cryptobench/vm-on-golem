name: Build and Release Provider GUI

on:
  workflow_dispatch: {}
  push:
    tags:
      - 'provider-gui-v*'
      - 'gui-v*'

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
            builder_args: '--linux deb AppImage'
          - os: macos-13
            target: mac-x64
            builder_args: '--mac dmg pkg --x64'
          - os: macos-14
            target: mac-arm64
            builder_args: '--mac dmg pkg --arm64'
          - os: windows-latest
            target: win
            builder_args: '--win nsis'

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install Poetry
        run: |
          python -m pip install poetry

      - name: Install provider dependencies (Poetry)
        run: |
          poetry -C provider-server install --no-interaction --no-ansi

      - name: Install PyInstaller in provider venv
        run: |
          poetry -C provider-server run pip install pyinstaller

      - name: Build and stage CLI into GUI resources
        run: |
          poetry -C provider-server run python ../scripts/build_provider_cli.py --onefile

      - name: Install GUI deps
        working-directory: provider-gui
        run: npm install --no-audit --no-fund

      - name: Build GUI installer
        working-directory: provider-gui
        run: npx electron-builder ${{ matrix.builder_args }}
        env:
          CI: true

      - name: Upload GUI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gui-dist-${{ matrix.target }}
          path: |
            provider-gui/dist/**/*
          if-no-files-found: error

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download all GUI artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: gui-dist-*
          merge-multiple: true
          path: release-assets

      - name: Display collected assets
        run: ls -R release-assets || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          generate_release_notes: true
          files: |
            release-assets/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
