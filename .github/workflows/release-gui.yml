name: Build and Release Provider GUI

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag or ref to build (e.g., provider-gui-v1.2.3)"
        required: false
        type: string
      ref:
        description: "Commit SHA or branch to build if no tag provided"
        required: false
        type: string
      prerelease:
        description: "Mark release as pre-release"
        required: false
        default: false
        type: boolean
  push:
    tags:
      - 'provider-gui-v*'
      - 'gui-v*'
  # Handle tags created by the auto-tag workflow (pushed with GITHUB_TOKEN),
  # which do not trigger other workflows directly.
  workflow_run:
    workflows: ["Auto Bump & Tag Provider GUI"]
    types: [completed]

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    # Run on tag pushes, manual dispatch, or successful auto-tag completion
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
            builder_args: '--linux deb AppImage'
          - os: macos-13
            target: mac-x64
            builder_args: '--mac dmg pkg --x64'
          - os: macos-14
            target: mac-arm64
            builder_args: '--mac dmg pkg --arm64'
          - os: windows-latest
            target: win
            builder_args: '--win nsis'

    steps:
      # Checkout for workflow_run (auto-tag completion)
      - name: Check out code (workflow_run)
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      # Checkout for manual dispatch with specific tag
      - name: Check out code (manual tag)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.tag != '' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      # Checkout for manual dispatch with specific ref
      - name: Check out code (manual ref)
        if: ${{ github.event_name == 'workflow_dispatch' && (inputs.tag == '' || !inputs.tag) && inputs.ref != '' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      # Fallback checkout for tag push or default behavior
      - name: Check out code (default)
        if: ${{ github.event_name != 'workflow_run' && !(github.event_name == 'workflow_dispatch' && (inputs.tag != '' || inputs.ref != '')) }}
        uses: actions/checkout@v4

      - name: Determine version (for release tag)
        id: gui_meta
        shell: bash
        run: |
          VERSION=$(node -p "require('./provider-gui/package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Ensure draft GitHub Release exists (v{version})
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.gui_meta.outputs.VERSION }}
          name: Provider GUI ${{ steps.gui_meta.outputs.VERSION }}
          draft: true
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install Poetry
        run: |
          python -m pip install poetry

      - name: Install provider dependencies (Poetry)
        run: |
          poetry -C provider-server install --no-interaction --no-ansi

      - name: Install PyInstaller in provider venv
        run: |
          poetry -C provider-server run pip install pyinstaller

      - name: Build and stage CLI into GUI resources
        run: |
          poetry -C provider-server run python ../scripts/build_provider_cli.py --onefile

      - name: Install GUI deps
        working-directory: provider-gui
        run: |
          # Ensure a clean install (avoid stale committed node_modules on Windows)
          node -e "require('fs').rmSync('node_modules', { recursive: true, force: true });"
          npm cache clean --force
          # Use install instead of ci to avoid lock mismatch failures
          npm install --no-audit --no-fund

      - name: Build GUI installer
        working-directory: provider-gui
        run: npx electron-builder ${{ matrix.builder_args }}
        env:
          CI: true
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Optional Apple signing + notarization secrets
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          # Optional code signing certificate (Developer ID Application) for macOS
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

      - name: Upload GUI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gui-dist-${{ matrix.target }}
          path: |
            provider-gui/dist/**/*
          if-no-files-found: error

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || (github.event_name == 'workflow_dispatch' && inputs.tag != '' && inputs.tag || github.ref) }}
      # Determine tag name and version
      - name: Determine tag/version
        id: meta
        shell: bash
        run: |
          # Prefer explicit input tag on manual runs
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.tag }}" ]; then
            TAG="${{ inputs.tag }}"
            VERSION="${TAG#provider-gui-v}"
          else
            VERSION=$(node -p "require('./provider-gui/package.json').version")
            TAG="v${VERSION}"
          fi
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          generate_release_notes: true
          # Use selected tag or derive from package.json
          tag_name: ${{ steps.meta.outputs.TAG }}
          prerelease: ${{ github.event_name == 'workflow_dispatch' && inputs.prerelease || false }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
